<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog of Ankarion - PostgreSQL</title><link href="https://ankarion.github.io/blog/" rel="alternate"></link><link href="https://ankarion.github.io/blog/feeds/postgresql.atom.xml" rel="self"></link><id>https://ankarion.github.io/blog/</id><updated>2017-12-14T12:20:00+01:00</updated><entry><title>Jsonb</title><link href="https://ankarion.github.io/blog/jsonb.html" rel="alternate"></link><published>2017-12-14T12:20:00+01:00</published><updated>2017-12-14T12:20:00+01:00</updated><author><name>Bykov Anthony</name></author><id>tag:ankarion.github.io,2017-12-14:/blog/jsonb.html</id><summary type="html">&lt;h1&gt;Jsonb&lt;/h1&gt;
&lt;h2&gt;Jsonb outline:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;definition&lt;/li&gt;
&lt;li&gt;usage&lt;/li&gt;
&lt;li&gt;benchmarks&lt;/li&gt;
&lt;li&gt;future work&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;It looks like a usual json except for some internal representation differences:&lt;/p&gt;
&lt;table class="table-bordered" border="1"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Comment&lt;/th&gt;
            &lt;th&gt;Example&lt;/th&gt;
            &lt;th&gt;Json&lt;/th&gt;
            &lt;th&gt;Jsonb&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;unique keys&lt;/td&gt;
            &lt;td&gt;select '{"0":0, "1":1,"0":2}'::json;&lt;/td&gt;
            &lt;td&gt;{"0":0, "1":1, "0":2}&lt;/td&gt;
            &lt;td&gt;'{"1":1, "0":2}'&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;no identation&lt;/td&gt;
            &lt;td&gt;select '{"0":0 â€¦&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;Jsonb&lt;/h1&gt;
&lt;h2&gt;Jsonb outline:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;definition&lt;/li&gt;
&lt;li&gt;usage&lt;/li&gt;
&lt;li&gt;benchmarks&lt;/li&gt;
&lt;li&gt;future work&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;It looks like a usual json except for some internal representation differences:&lt;/p&gt;
&lt;table class="table-bordered" border="1"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Comment&lt;/th&gt;
            &lt;th&gt;Example&lt;/th&gt;
            &lt;th&gt;Json&lt;/th&gt;
            &lt;th&gt;Jsonb&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;unique keys&lt;/td&gt;
            &lt;td&gt;select '{"0":0, "1":1,"0":2}'::json;&lt;/td&gt;
            &lt;td&gt;{"0":0, "1":1, "0":2}&lt;/td&gt;
            &lt;td&gt;'{"1":1, "0":2}'&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;no identation&lt;/td&gt;
            &lt;td&gt;select '{"0":0, "1":1, "0":2}'::json;&lt;/td&gt;
            &lt;td&gt;{"0":0, "1":1, "0":2}&lt;/td&gt;
            &lt;td&gt;'{"1":1, "0":2}'&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;I will suggest to use jsonb in case when your tables are sparse.&lt;/p&gt;
&lt;h2&gt;Benchmarks:&lt;/h2&gt;
&lt;h3&gt;without jsonb at all&lt;/h3&gt;
&lt;p&gt;The key concept of this point is to check how much space and time can jsonb save if the data in database is hardly structured.&lt;/p&gt;
&lt;h3&gt;json vs jsonb&lt;/h3&gt;
&lt;p&gt;Let's assume that we all agree that json and jsonb are both useful. But what is better(faster)? This question will be answered in the following benchmark. &lt;a href="https://github.com/ankarion/jsonb_plperl/blob/master/sql/bench/gen_tests.py"&gt;Here&lt;/a&gt; you can find a python script I used to generate tests. Actually, all of the benchmark tests look like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;testold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;testnew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;jsonb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;em&gt;"testnew"&lt;/em&gt; is used to test jsonb and &lt;em&gt;"testold"&lt;/em&gt; is used to test json so that we can clearly define what were the results of jsonb and json.
![benchmark results][transform]&lt;/p&gt;
&lt;script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
     var data;
     var chart;

      // Load the Visualization API and the piechart package.
      google.charts.load('current', {'packages':['corechart']});

      // Set a callback to run when the Google Visualization API is loaded.
      google.charts.setOnLoadCallback(drawChart);

      // Callback that creates and populates a data table,
      // instantiates the pie chart, passes in the data and
      // draws it.
      function drawChart() {
        data = new google.visualization.DataTable();
        data.addColumn('number', 'json size');
        data.addColumn('number', 'latency_old');
        data.addColumn('number', 'latency_new');
        data.addRows([
          [1,       7.208,      2.77],
          [1001,    53.411,     9.285],
          [2001,    103.929,    16.214],
          [3001,    157.989,    25.814],
          [4001,    204.865,    31.78],
          [5001,    259.243,    40.423],
          [6001,    309.912,    49.886],
          [7001,    359.798,    53.999],
          [8001,    414.597,    63.592],
          [9001,    481.893,    74.574],
          [10001,   520.906,    80.629],
          [11001,   573.934,    87.01],
          [12001,   630.937,    94.384],
          [13001,   686.475,    103.035],
          [14001,   744.054,    113.548],
          [15001,   798.305,    116.316],
          [16001,   861.136,    126.024],
          [17001,   916.432,    148.425],
          [18001,   979.769,    151.548],
          [19001,   1050.776,   161.134],
          [20001,   1084.992,   169.715],
          [21001,   1149.904,   181.003],
          [22001,   1189.699,   185.644],
          [23001,   1237.404,   192.815],
          [24001,   1298.407,   199.408],
          [25001,   1348.316,   209.455],
          [26001,   1431.793,   221.336],
          [27001,   1474.972,   219.977],
          [28001,   1510.263,   225.925],
          [29001,   1574.153,   241.067]
        ]);

        // Set chart options
        var options = {
            title:'Differences in latency',
            curveType: 'function',
            legend: { position: 'bottom' }
            };

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
        // google.visualization.events.addListener(chart, 'select', selectHandler);
        chart.draw(data, options);
      }

      function selectHandler() {
        var selectedItem = chart.getSelection()[0];
        var value = data.getValue(selectedItem.row, 0);
        alert('The user selected ' + value);
      }

&lt;/script&gt;

&lt;div id="chart_div" style="width:400; height:300"&gt;&lt;/div&gt;

&lt;h2&gt;Future work:&lt;/h2&gt;</content></entry></feed>