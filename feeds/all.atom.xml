<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog of Ankarion</title><link href="https://ankarion.github.io/blog/" rel="alternate"></link><link href="https://ankarion.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>https://ankarion.github.io/blog/</id><updated>2017-12-15T12:20:00+01:00</updated><entry><title>pgBench and YCSB</title><link href="https://ankarion.github.io/blog/pgbench-and-ycsb.html" rel="alternate"></link><published>2017-12-15T12:20:00+01:00</published><updated>2017-12-15T12:20:00+01:00</updated><author><name>Bykov Anthony</name></author><id>tag:ankarion.github.io,2017-12-15:/blog/pgbench-and-ycsb.html</id><summary type="html">&lt;h1&gt;YCSB&lt;/h1&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Yahoo! Cloud Serving Benchmark&lt;/p&gt;
&lt;p&gt;Comming soon&lt;/p&gt;</summary><content type="html">&lt;h1&gt;YCSB&lt;/h1&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Yahoo! Cloud Serving Benchmark&lt;/p&gt;
&lt;p&gt;Comming soon&lt;/p&gt;</content></entry><entry><title>Jsonb</title><link href="https://ankarion.github.io/blog/jsonb.html" rel="alternate"></link><published>2017-12-14T12:20:00+01:00</published><updated>2017-12-14T12:20:00+01:00</updated><author><name>Bykov Anthony</name></author><id>tag:ankarion.github.io,2017-12-14:/blog/jsonb.html</id><summary type="html">&lt;script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"&gt;&lt;/script&gt;

&lt;h1&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;definition&lt;/strong&gt; section contains link to official documentation and some thoughts about it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;usage&lt;/strong&gt; section - for those who was interested in usage of jsonb. It contains description of the project I used to work with and some comments on how it should be implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;benchmarks&lt;/strong&gt; - contains velocity comparison of jsonb â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"&gt;&lt;/script&gt;

&lt;h1&gt;Outline&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;definition&lt;/strong&gt; section contains link to official documentation and some thoughts about it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;usage&lt;/strong&gt; section - for those who was interested in usage of jsonb. It contains description of the project I used to work with and some comments on how it should be implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;benchmarks&lt;/strong&gt; - contains velocity comparison of jsonb and json.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Definition&lt;/h1&gt;
&lt;p&gt;At first glance, jsonb looks like a usual json except for some differences in guts:&lt;/p&gt;
&lt;script type="text/javascript"&gt;
      google.charts.load('current', {'packages':['table']});
      google.charts.setOnLoadCallback(drawTable);

      function drawTable() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Comment');
        data.addColumn('string', 'Example');
        data.addColumn('string', 'Json');
        data.addColumn('string', 'Jsonb');

        // TODO: find out how to show spaces!!!
        data.addRows([
          ['unique keys', 'select \'{"0":0, "1":1, "0":2}\'::json;','{"0":0, "1":1, "0":2}', '{"1":1, "0":2}'],
          ['no identation',  'select \'{"0":0, "1":1,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0":2}\'::json;',  '{"0":0, "1":1, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"0":2}', '{"1":1, "0":2}']
        ]);

        var table = new google.visualization.Table(document.getElementById('definition_table'));

        table.draw(data, {showRowNumber: true, width: '100%', height: '100%', allowHtml: true});
      }
&lt;/script&gt;

&lt;div id="definition_table"&gt;&lt;/div&gt;

&lt;p&gt;But don't be fooled by this data. Jsonb is much more complex then json. &lt;a href="https://www.postgresql.org/docs/9.6/static/functions-json.html"&gt;Here&lt;/a&gt; you can find full definition of jsonb.&lt;/p&gt;
&lt;h1&gt;Usage&lt;/h1&gt;
&lt;p&gt;Long story short, I will suggest using jsonb in case when your tables are too sparse. The following chapter will explain this.&lt;/p&gt;
&lt;h2&gt;Project&lt;/h2&gt;
&lt;p&gt;Let's imagine that we have a beautiful project with data in &lt;a href="https://en.wikipedia.org/wiki/Third_normal_form"&gt;3NF&lt;/a&gt;, everything works fine and fast. Let's look at our beautiful table of &lt;strong&gt;users&lt;/strong&gt;:&lt;/p&gt;
&lt;script type="text/javascript"&gt;
      google.charts.load('current', {'packages':['table']});
      google.charts.setOnLoadCallback(drawTable);

      function drawTable() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Name');
        data.addColumn('number', 'Salary');
        data.addRows([
          ['Mike',  {v: 10000, f: '$10,000'}],
          ['Jim',   {v:8000,   f: '$8,000'}],
          ['Alice', {v: 12500, f: '$12,500'}],
          ['Bob',   {v: 7000,  f: '$7,000'}],
        ]);

        var table = new google.visualization.Table(document.getElementById('usage_table'));

        table.draw(data, {showRowNumber: true, width: '30%', height: '30%'});
      }
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;
&lt;div id="usage_table"&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;And suddenly our customer wants to add more features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wife's salary (should be null if a user doesn't have one)&lt;/li&gt;
&lt;li&gt;kid's salary (should be null if a user doesn't have one)&lt;/li&gt;
&lt;li&gt;apartment size square meters (should also be null if a user doesn't have one)&lt;/li&gt;
&lt;li&gt;if a user is an admin - add fields like "when it became an admin" &lt;/li&gt;
&lt;li&gt;if a user is an elf - add the id of his tree&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding all those field to the table has some significant drawbacks. One of them is a huge amount of fields(columns) and redundant information in tables: just imagine what happens if Mike, for example, and Alice have 3 children each? All the fields our customer wanted to add will be repeated for each child:&lt;/p&gt;
&lt;script type="text/javascript"&gt;
      google.charts.load('current', {'packages':['table']});
      google.charts.setOnLoadCallback(drawTable);

      function drawTable() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Name');
        data.addColumn('number', 'Salary');
        data.addColumn('number', 'wife\'s salary');
        data.addColumn('number', 'kids salary');
        data.addColumn('number', 'apartment size');
        data.addColumn('string', 'etc');
        data.addRows([
          ['Mike',  {v: 10000, f: '$10,000'},  {v: 1000, f: '$1,000'}, {v: 15000, f: '$15,000'}, 42, '...'],
          ['Mike',  {v: 10000, f: '$10,000'},  {v: 1000, f: '$1,000'}, {v: 5000, f: '$5,000'}, 42, '...'],
          ['Mike',  {v: 10000, f: '$10,000'},  {v: 1000, f: '$1,000'}, {v: 23000, f: '$23,000'}, 42, '...'],
          ['Jim',   {v:8000,   f: '$8,000'},   {v: 8000, f: '$8,000'}, null, 100, '...'],
          ['Alice', {v: 12500, f: '$12,500'},  null, {v: 15000, f: '$15,000'}, 78, '...'],
          ['Alice', {v: 12500, f: '$12,500'},  null, {v: 4000, f: '$4,000'}, 78, '...'],
          ['Alice', {v: 12500, f: '$12,500'},  null, {v: 100000, f: '$100,000'}, 78, '...'],
          ['Bob',   {v: 7000,  f: '$7,000'},   null, null, null, '...'],
        ]);

        var table = new google.visualization.Table(document.getElementById('usage_table_3'));

        table.draw(data, {showRowNumber: true, width: '90%', height: '90%'});
      }
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;
&lt;div id="usage_table_3"&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;As a result, our pretty 4 by 4 table became a 100500 by 100500 monster! We can fix it in 2 different ways: normalization or jsonb.&lt;/p&gt;
&lt;h3&gt;Normalization&lt;/h3&gt;
&lt;p&gt;The first idea is to return data back to &lt;a href="https://en.wikipedia.org/wiki/Third_normal_form"&gt;3NF&lt;/a&gt; in order to reduce sizes of that monster.&lt;/p&gt;
&lt;script type="text/javascript"&gt;
      google.charts.load('current', {'packages':['table']});
      google.charts.setOnLoadCallback(drawTable);

      function drawTable() {
        var data1 = new google.visualization.DataTable();
        data1.addColumn('string', 'Name');
        data1.addColumn('number', 'Salary');
        data1.addColumn('number', 'Wife');
        data1.addColumn('number', 'apartment size');
        data1.addColumn('string', 'etc');
        data1.addRows([
          ['Mike',  {v: 10000, f: '$10,000'}, 3, 42, '...'],
          ['Jim',   {v:8000,   f: '$8,000'},  null, 100, '...'],
          ['Alice', {v: 12500, f: '$12,500'}, null, 78, '...'],
          ['Bob',   {v: 7000,  f: '$7,000'},  null, null, '...'],
        ]);

        var table = new google.visualization.Table(document.getElementById('normalization_table_1'));

        table.draw(data1, {showRowNumber: true, width: '100%', height: '100%'});

        var data2 = new google.visualization.DataTable();
        data2.addColumn('number', 'Salary');
        data2.addColumn('number', 'Parent 1');
        data2.addColumn('number', 'Parent 2');
        data2.addColumn('string', 'etc');
        data2.addRows([
          [{v: 15000, f: '$15,000'}, 1, 3, '...'],
          [{v: 5000, f: '$5,000'}, 1, null, '...'],
          [{v: 23000, f: '$23,000'}, 1, null, '...'],
          [{v: 100000, f: '$100,000'}, 3, null, '...'],
          [{v: 4000,  f: '$4,000'},  3, null, '...'],
        ]);

        var table = new google.visualization.Table(document.getElementById('normalization_table_2'));

        table.draw(data2, {showRowNumber: true, width: '100%', height: '100%'});
      }
&lt;/script&gt;

&lt;p&gt;&lt;center&gt;&lt;div id="entities"&gt;&lt;/div&gt;&lt;/center&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;users:&lt;/b&gt;&lt;div id="normalization_table_1"&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;kids:&lt;/b&gt;&lt;div id="normalization_table_2"&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the example, Mike has a wife(Alice) and they have only one kid with salary $15,000, but they have 2 more kids from other marriage.&lt;/p&gt;
&lt;!-- TODO: add more tables --&gt;

&lt;p&gt;We'll have about 100500 different tables with 2-3 tuples. The problem we can run into is a complexity of joins. Let's look at other solution.&lt;/p&gt;
&lt;h3&gt;Jsonb&lt;/h3&gt;
&lt;p&gt;This is where json comes. We can put all those fields (especially about kids) into json:&lt;/p&gt;
&lt;script type="text/javascript"&gt;
      google.charts.load('current', {'packages':['table']});
      google.charts.setOnLoadCallback(drawTable);

      function drawTable() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Name');
        data.addColumn('number', 'Salary');
        data.addColumn('string', 'extra fields');
        data.addRows([
          ['Mike',  {v: 10000, f: '$10,000'},  "{'wife\'s salary':$15,000, 'kids salary':[$1,000, $5,000, $23,000], 'apartment size':42, 'etc':'...'}"],
          ['Jim',   {v:8000,   f: '$8,000'},   "{'wife\'s salary':$8,000, 'apartment size':100, 'etc':'...'}"],
          ['Alice', {v: 12500, f: '$12,500'},  "{'wife\'s salary':$15,000, 'kids salary':[$1,000, $4,000, $100,000], 'apartment size':78, 'etc':'...'}"],
          ['Bob',   {v: 7000,  f: '$7,000'},   "{'etc':'...'}"],
        ]);

        var table = new google.visualization.Table(document.getElementById('usage_table_4'));

        table.draw(data, {showRowNumber: true, width: '100%', height: '100%'});
      }
&lt;/script&gt;

&lt;div id="usage_table_4"&gt;&lt;/div&gt;

&lt;p&gt;So, we have 5 by 4 table now.&lt;/p&gt;
&lt;h1&gt;Benchmarks:&lt;/h1&gt;
&lt;p&gt;Let's assume that we all agree that json and jsonb are both useful. But what is better(faster)? This question will be answered in the following benchmark. &lt;a href="https://github.com/ankarion/jsonb_plperl/blob/master/sql/bench/gen_tests.py"&gt;Here&lt;/a&gt; you can find a python script I used to generate tests. &lt;/p&gt;
&lt;p&gt;Benchmarking proccesss is divided into two stages: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the init part, which is not going to be taken into account.&lt;/li&gt;
&lt;li&gt;the workload part, which is going to be evaluated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In "init" part, we initialize the functions which transforms objects into perl and then parses it back to plpgsql language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;jsonb_plperlu&lt;/span&gt; &lt;span class="k"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;jsonb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;jsonb&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plperlu&lt;/span&gt;
&lt;span class="k"&gt;TRANSFORM&lt;/span&gt; &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;jsonb&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="n"&gt;plperlu&lt;/span&gt;
&lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;encode_json&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The workload looks like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;testold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;testnew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;jsonb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript"&gt;
     var data;
     var chart;

      // Load the Visualization API and the piechart package.
      google.charts.load('current', {'packages':['corechart']});

      // Set a callback to run when the Google Visualization API is loaded.
      google.charts.setOnLoadCallback(drawChart);

      // Callback that creates and populates a data table,
      // instantiates the pie chart, passes in the data and
      // draws it.
      function drawChart() {
        data = new google.visualization.DataTable();
        data.addColumn('number', 'json size');
        data.addColumn('number', 'latency_old, s');
        data.addColumn('number', 'latency_new, s');
        data.addRows([
          [1,       7.208,      2.77],
          [1001,    53.411,     9.285],
          [2001,    103.929,    16.214],
          [3001,    157.989,    25.814],
          [4001,    204.865,    31.78],
          [5001,    259.243,    40.423],
          [6001,    309.912,    49.886],
          [7001,    359.798,    53.999],
          [8001,    414.597,    63.592],
          [9001,    481.893,    74.574],
          [10001,   520.906,    80.629],
          [11001,   573.934,    87.01],
          [12001,   630.937,    94.384],
          [13001,   686.475,    103.035],
          [14001,   744.054,    113.548],
          [15001,   798.305,    116.316],
          [16001,   861.136,    126.024],
          [17001,   916.432,    148.425],
          [18001,   979.769,    151.548],
          [19001,   1050.776,   161.134],
          [20001,   1084.992,   169.715],
          [21001,   1149.904,   181.003],
          [22001,   1189.699,   185.644],
          [23001,   1237.404,   192.815],
          [24001,   1298.407,   199.408],
          [25001,   1348.316,   209.455],
          [26001,   1431.793,   221.336],
          [27001,   1474.972,   219.977],
          [28001,   1510.263,   225.925],
          [29001,   1574.153,   241.067]
        ]);

        // Set chart options
        var options = {
            title:'Differences in latency',
            curveType: 'function',
            legend: { position: 'right' }
            };

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
        // google.visualization.events.addListener(chart, 'select', selectHandler);
        chart.draw(data, options);
      }

      function selectHandler() {
        var selectedItem = chart.getSelection()[0];
        var value = data.getValue(selectedItem.row, 0);
        alert('The user selected ' + value);
      }

&lt;/script&gt;

&lt;div id="chart_div" style="width:400; height:700"&gt;&lt;/div&gt;

&lt;h1&gt;Future work:&lt;/h1&gt;</content></entry></feed>